@page "/Bars/Add"
@page "/Bars/{Id:guid}/Edit"
@inherits BaseComponent
<MudPageLayout Title="Edit">
    <BarForm EntityId="Id" Debug="true">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Simple values</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Bar" @bind-Value="@context.Entity.Bar" For="() => context.Entity.Bar"></MudTextField>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Edit Foo</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (context.Entity.Foo is not null)
                {
                    <MudTextField Label="Foo" @bind-Value="@context.Entity.Foo.Foo" For="() => context.Entity.Foo.Foo"></MudTextField>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="mr-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => context.SetFoo()">Set foo</MudButton>
                <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="() => context.DeleteFoo()">Delete foo</MudButton>
            </MudCardActions>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Edit Foos</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @foreach (var foo in context.Entity.Foos)
                {
                    <MudTextField Label="Foo" @bind-Value="@foo.Foo" For="() => foo.Foo" Class="mt-2"></MudTextField>
                    <MudButton Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" Class="mt-2" OnClick="() => context.RemoveFoo(foo)">Remove foo</MudButton>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => context.AddFoo()">Add foo</MudButton>
            </MudCardActions>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Current storage items</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (context.Entity.StorageItem is not null)
                {
                    <MudText>Storage item: @context.Entity.StorageItem</MudText>
                }
                @foreach (var file in context.Entity.StorageItems)
                {
                    <p>Storage item: @file</p>
                }
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Simple file input</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudFileUpload
                    Storage="Storage"
                    @bind-Value="context.Entity.StorageItem"
                    For="() => context.Entity.StorageItem"
                    UploadPath="bars"
                    MaxFileSize="@(2 * 1024 * 1024)"
                    GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                </MudFileUpload>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Simple custom file input</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudFileUpload
                    Storage="Storage"
                    @bind-Value="context.Entity.StorageItem"
                    For="() => context.Entity.StorageItem"
                    UploadPath="bars"
                    MaxFileSize="@(2 * 1024 * 1024)"
                    GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                    <ChildContent Context="upload">
                        PRESS ME
                    </ChildContent>
                </MudFileUpload>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Multiple file input</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudFilesUpload
                    Storage="Storage"
                    TCollection="ValueCollection<StorageItem>"
                    @bind-Value="context.Entity.StorageItems"
                    For="() => context.Entity.StorageItems"
                    UploadPath="bars"
                    MaxFileSize="@(2 * 1024 * 1024)"
                    GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                </MudFilesUpload>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Single image</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudFileUpload
                    Storage="Storage"
                    DisplayMode="FileUploadDisplayMode.Image"
                    @bind-Value="context.Entity.StorageItem"
                    For="() => context.Entity.StorageItem"
                    UploadPath="bars"
                    MaxFileSize="@(2 * 1024 * 1024)"
                    GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                </MudFileUpload>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>Multiple image</CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudFilesUpload
                    Storage="Storage"
                    TCollection="ValueCollection<StorageItem>"
                    DisplayMode="FileUploadDisplayMode.Image"
                    @bind-Value="context.Entity.StorageItems"
                    For="() => context.Entity.StorageItems"
                    UploadPath="bars"
                    MaxAllowedFiles="5"
                    MaxFileSize="@(2 * 1024 * 1024)"
                    GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                </MudFilesUpload>
            </MudCardContent>
        </MudCard>
        <MudPaper Class="mt-2 pa-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!context.CanSave())" OnClick="@context.SaveEntityAsync">Save</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@(!context.HasChanges)" OnClick="@context.ResetAsync">Reset</MudButton>
        </MudPaper>
    </BarForm>
</MudPageLayout>

@code {

    [Parameter]
    public Guid Id { get; set; }

    private IStorage Storage => GetRequiredService<IStorage>();

    private static Task<object> GenerateMetadataAsync()
    {
        var metadata = new BarStorageMetadata();
        return Task.FromResult<object>(metadata);
    }

}
